{"version":3,"sources":["logo.svg","components/Board.js","components/useGameLogic.js","components/TicTacToe.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Board","styled","table","_templateObject","Object","taggedTemplateLiteral","Circle","_ref","size","react_default","a","createElement","className","width","height","stroke","fill","strokeWidth","cx","cy","r","Row","tr","_templateObject2","Cell","td","_templateObject3","_ref2","_ref3","defaultTable","components_Board","_ref4","_ref4$table","cellClick","_ref4$cellSize","cellSize","map","row","rowIndex","key","item","colIndex","onClick","Board_Circle","initialBoard","GAME_MODES","playerLetter","useGameLogic","_useState","useState","cloneDeep","_useState2","slicedToArray","setTable","_useState3","_useState4","winner","setWinner","_useState5","_useState6","gameover","setGameover","_useState7","_useState8","round","setRound","_useState9","_useState10","activePlayer","setPlayer","_useState11","_useState12","showGameover","setShowGameover","_useState13","_useState14","gameMode","setGameMode","getCell","pos","parseInt","col","bestSpot","cell","i","updateTable","useCallback","tbl","draft","toConsumableArray","useEffect","playerWon","colResult","checkRow","testTable","testRowResult","_step","_iterator","createForOfIteratorHelper","s","n","done","joinedRow","value","join","repeat","err","e","f","rowResult","transposedTable","_step2","_iterator2","_step3","_iterator3","player","Array","isArray","push","dia1","from","_","countDown","dia2","diaBoolCheck","letter","diaResultX","diaResultO","checkWinner","kiClick","dim","gameStatus","currentPlayerText","actions","handleCellClick","handleRestart","hideGameoverModal","TicTacToe","_useGameLogic","_useGameLogic2","_useGameLogic2$","Fragment","lib_default","appElement","document","getElementById","isOpen","onRequestClose","concat","Restart","button","TicTacToe_templateObject","App","TicTacToe_TicTacToe","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.a00abff3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Icon } from \"react-icons-kit\";\r\nimport { x } from \"react-icons-kit/oct/x\";\r\nconst Board = styled.table`\r\n  border-collapse: collapse;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Circle = ({ size }) => (\r\n  <div className=\"Play0\">\r\n    <svg width={size} height={size}>\r\n      <circle\r\n        stroke=\"#FFDE03\"\r\n        fill=\"none\"\r\n        strokeWidth={6}\r\n        cx={size / 2}\r\n        cy={size / 2}\r\n        r={(size - 6) / 2}\r\n      />\r\n    </svg>\r\n  </div>\r\n);\r\n\r\nconst Row = styled.tr`\r\n  :last-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\nconst Cell = styled.td`\r\n  width: ${({ size }) => size}px;\r\n  height: ${({ size }) => size}px;\r\n  text-align: center;\r\n`;\r\nconst defaultTable = [\r\n  [null, null, null],\r\n  [null, null, null],\r\n  [null, null, null],\r\n];\r\n\r\nexport default ({ table = defaultTable, cellClick, cellSize = 100 }) => (\r\n  <Board>\r\n    <tbody>\r\n      {table.map((row, rowIndex) => (\r\n        <Row key={rowIndex}>\r\n          {row.map((item, colIndex) => (\r\n            <Cell\r\n              size={cellSize}\r\n              key={colIndex}\r\n              onClick={() => cellClick(rowIndex, colIndex)}\r\n            >\r\n              <div className=\"svgfile\">\r\n                {item === null ? (\r\n                  \"\"\r\n                ) : item === \"x\" ? (\r\n                  <p className=\"PlayX\">X</p>\r\n                ) : (\r\n                  <Circle size={cellSize * 0.5} />\r\n                )}\r\n              </div>\r\n            </Cell>\r\n          ))}\r\n        </Row>\r\n      ))}\r\n    </tbody>\r\n  </Board>\r\n);\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport cloneDeep from \"lodash.clonedeep\";\r\n\r\nconst initialBoard = [\r\n  [null, null, null],\r\n  [null, null, null],\r\n  [null, null, null]\r\n];\r\n\r\nconst dim = 3;\r\n// row-wise\r\n// col-wise\r\n// diagonal1\r\n// diagonal2\r\nexport const checkWinner = (table) => {\r\n  let colResult;\r\n  // row check\r\n  // x x o\r\n  // x x x => xxx\r\n  // o x x\r\n  // o o x\r\n  // o o o => ooo\r\n  const checkRow = (testTable) => {\r\n    let testRowResult;\r\n    for (let row of testTable) {\r\n      const joinedRow = row.join(\"\");\r\n      if (joinedRow === \"x\".repeat(dim)) {\r\n        // xxx\r\n        testRowResult = \"x\";\r\n      } else if (joinedRow === \"o\".repeat(dim)) {\r\n        // ooo\r\n        testRowResult = \"o\";\r\n      }\r\n      if (testRowResult) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return testRowResult;\r\n  };\r\n\r\n  // check row\r\n  const rowResult = checkRow(table);\r\n  // col check\r\n  // transpose table --> cols are getting rows of transposed table\r\n  // so we can do the same test\r\n  let transposedTable = [\r\n    // [],\r\n    // [],\r\n    // []\r\n  ];\r\n  if (!rowResult) {\r\n    for (let row of table) {\r\n      let colIndex = 0;\r\n      for (let player of row) {\r\n        if (!Array.isArray(transposedTable[colIndex]))\r\n          transposedTable[colIndex] = [];\r\n\r\n        transposedTable[colIndex].push(player);\r\n        colIndex++;\r\n      }\r\n    }\r\n\r\n    colResult = checkRow(transposedTable);\r\n  }\r\n\r\n  // check diagonals\r\n  // x o o\r\n  // o x o\r\n  // o o x\r\n  // index 00, 11, 22 --> can be calculated with a counter\r\n  // or 02, 11, 20\r\n  /*\r\n  \r\n  // 4 by 4\r\n  // o o o x\r\n  // o o x o\r\n  // o x o o\r\n  // x o o o\r\n  \r\n  // 03, 12, 21, 30\r\n  // row++\r\n  // col = max--\r\n\r\n  // hard-coded\r\n  const center = table[1][1];\r\n  const dia1 = table[0][0] + center + table[2][2];\r\n  const dia2 = table[0][2] + table[1][1] + table[2][0];*/\r\n\r\n  const dia1 = Array.from(new Array(dim))\r\n    .map((_, i) => table[i][i])\r\n    .join(\"\");\r\n  let countDown = dim;\r\n  const dia2 = Array.from(new Array(dim))\r\n    .map((_, i) => table[i][--countDown])\r\n    .join(\"\");\r\n\r\n  const diaBoolCheck = (letter) =>\r\n    (dia1 === letter.repeat(dim) || dia2 === letter.repeat(dim)) && letter;\r\n  const diaResultX = diaBoolCheck(\"x\");\r\n  const diaResultO = diaBoolCheck(\"o\");\r\n  const diaResult = diaResultX || diaResultO;\r\n\r\n  return rowResult || colResult || diaResult;\r\n};\r\n\r\nconst GAME_MODES = {\r\n  human: false, // human vs. human\r\n  ki: {\r\n    // human vs. ki --> o for KI & human starts\r\n    playerLetter: \"o\"\r\n  },\r\n  training: false // like human vs human but agent1 vs agent2\r\n  // x = human\r\n  // o = ki\r\n};\r\n\r\nexport default () => {\r\n  const [table, setTable] = useState(cloneDeep(initialBoard));\r\n  const [winner, setWinner] = useState(null);\r\n  const [gameover, setGameover] = useState(false);\r\n  const [round, setRound] = useState(0);\r\n  const [activePlayer, setPlayer] = useState(\"x\");\r\n  const [showGameover, setShowGameover] = useState(false);\r\n\r\n  // gamemode not used yet, but we could switch between\r\n  // human, ki basic & ki minimax (later)\r\n  const [gameMode, setGameMode] = useState(GAME_MODES.human ? \"human\" : \"ki\");\r\n\r\n  const handleCellClick = (row, col) => {\r\n    if (gameover || table[row][col] !== null) {\r\n      // already selected or game-over --> skip click\r\n      return;\r\n    }\r\n\r\n    if (gameMode === \"ki\" && activePlayer === GAME_MODES.ki.playerLetter) {\r\n      return; // ignore user clicks - if KI's turn\r\n    }\r\n\r\n    updateTable(row, col);\r\n  };\r\n\r\n  const getCell = (pos) => {\r\n    // 1 2 3 4 5 6 7 8 9\r\n    // row 0 row 1 row 2\r\n    // 0 1 2 0 1 2 0 1 2\r\n    // e.g. (1 - 1) / 3 = 0\r\n    //      (2 - 1) / 3 = 0\r\n    //      (3 - 1) / 3 = 0\r\n    //      (4 - 1) / 3 = 1\r\n    const row = parseInt((pos - 1) / 3, 10); // 4 --> row = 1\r\n    return {\r\n      row,\r\n      col: pos - 1 - row * 3\r\n    };\r\n  };\r\n\r\n  const isCellEmpty = (row, col) => table[row][col] === null;\r\n\r\n  // simple KI - picks the first empty spot\r\n  const firstEmptyCell = () => {\r\n    let cell;\r\n    for (let i = 0; i < 9; i++) {\r\n      cell = getCell(i);\r\n      if (isCellEmpty(cell.row, cell.col)) {\r\n        break;\r\n      }\r\n    }\r\n    return cell;\r\n  };\r\n\r\n  const bestSpot = firstEmptyCell;\r\n\r\n  const handleRestart = () => {\r\n    setTable(cloneDeep(initialBoard));\r\n    setWinner(null);\r\n    setPlayer(\"x\");\r\n    setRound(0);\r\n    setGameover(false);\r\n  };\r\n\r\n  const hideGameoverModal = () => setShowGameover(false);\r\n\r\n  const updateTable = useCallback(\r\n    (row, col) => {\r\n      setTable((tbl) => {\r\n        let draft = [...tbl];\r\n        draft[row][col] = activePlayer;\r\n        return draft;\r\n      });\r\n\r\n      setPlayer((a) => (a === \"x\" ? \"o\" : \"x\")); // toggle player\r\n      setRound((r) => r + 1);\r\n    },\r\n    [activePlayer]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (round > 0) {\r\n      const playerWon = checkWinner(table);\r\n      if (playerWon) {\r\n        setWinner(playerWon);\r\n        setGameover(true);\r\n      } else if (gameMode === \"ki\") {\r\n        const isKITurn = activePlayer === GAME_MODES.ki.playerLetter;\r\n\r\n        if (isKITurn) {\r\n          // call KI to do it's move\r\n          const kiClick = bestSpot();\r\n          updateTable(kiClick.row, kiClick.col);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (round >= dim * dim) {\r\n      setGameover(true);\r\n    }\r\n  }, [round, table, activePlayer, bestSpot, updateTable, gameMode]);\r\n\r\n  useEffect(() => {\r\n    if (gameover) {\r\n      if (winner === null) {\r\n        // no winner = draw game\r\n        // gameover && winner == null --> draw display\r\n        setShowGameover(true);\r\n        return;\r\n      }\r\n      setShowGameover(true);\r\n    }\r\n  }, [gameover, winner]);\r\n\r\n  const currentPlayerText = (player) => {\r\n    let playerText;\r\n\r\n    return playerText;\r\n  };\r\n\r\n  return [\r\n    table, // 2d array of the game\r\n    {\r\n      gameStatus: {\r\n        activePlayer, // x or o?\r\n        currentPlayerText,\r\n        gameMode, // ki or human mode\r\n        gameover,\r\n        round, // counter of round 0,1...\r\n        showGameover, // showing gameover modal\r\n        winner // x or o is the winner, undefined = draw\r\n      },\r\n      actions: {\r\n        handleCellClick, // update table\r\n        handleRestart, // game restart\r\n        hideGameoverModal,\r\n        setGameMode\r\n      }\r\n    }\r\n  ];\r\n};\r\n","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport styled from \"styled-components\";\r\nimport Board from \"./Board\";\r\nimport useGameLogic from \"./useGameLogic\";\r\nexport const TicTacToe = () => {\r\n  const [table, { gameStatus, actions }] = useGameLogic();\r\n  return (\r\n    <>\r\n      {!gameStatus.gameover && (\r\n        <span>{gameStatus.currentPlayerText(gameStatus.activePlayer)}</span>\r\n      )}\r\n      <Board table={table} cellClick={actions.handleCellClick} />\r\n\r\n      \r\n      <Modal\r\n        appElement={document.getElementById(\"root\")}\r\n        isOpen={gameStatus.showGameover}\r\n        onRequestClose={actions.hideGameoverModal}\r\n        className=\"madalGame\"\r\n      >\r\n        <h1>Game over</h1>\r\n        <h2>\r\n          {gameStatus.winner ? `Player ${gameStatus.winner} won!` : \"Draw!\"}\r\n        </h2>\r\n        <div className=\"Restart\">\r\n          <Restart\r\n            onClick={() => {\r\n              actions.hideGameoverModal();\r\n              actions.handleRestart();\r\n            }}\r\n          >\r\n            Restart game?\r\n          </Restart>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nconst Restart = styled.button`\r\n  outline: none;\r\n`;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TicTacToe } from \"./components/TicTacToe\";\nimport React from \"react\";\nfunction App() {\n  return (\n    <div className=\"App\">\n    <TicTacToe/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}